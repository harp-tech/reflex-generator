<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="Namespace" type="string" #>
<#@ parameter name="MetadataPath" type="string" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Interface.tt" #><##>
<#@ output extension=".Generated.cs" #>
<#
var deviceMetadata = TemplateHelper.ReadDeviceMetadata(MetadataPath);
var publicRegisters = deviceMetadata.Registers.Where(register => register.Value.Visibility == RegisterVisibility.Public).ToList();
var deviceRegisters = deviceMetadata.Registers;
var deviceName = deviceMetadata.Device;
#>
using Bonsai;
using Bonsai.Harp;
<#
foreach (var ns in Host.StandardImports)
{
    WriteLine("using " + ns + ";");
}
#>
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reactive.Linq;
using System.Xml.Serialization;

namespace <#= Namespace #>
{
    /// <summary>
    /// Generates events and processes commands for the <#= deviceName #> device connected
    /// at the specified serial port.
    /// </summary>
    [Combinator(MethodName = nameof(Generate))]
    [WorkflowElementCategory(ElementCategory.Source)]
    [Description("Generates events and processes commands for the <#= deviceName #> device.")]
    public partial class Device : Bonsai.Harp.Device, INamedElement
    {
        /// <summary>
        /// Represents the unique identity class of the <see cref="<#= deviceName #>"/> device.
        /// This field is constant.
        /// </summary>
        public const int WhoAmI = <#= deviceMetadata.WhoAmI #>;

        /// <summary>
        /// Initializes a new instance of the <see cref="Device"/> class.
        /// </summary>
        public Device() : base(WhoAmI) { }

        string INamedElement.Name => nameof(<#= deviceName #>);

        /// <summary>
        /// Gets a read-only mapping from address to register type.
        /// </summary>
        public static new IReadOnlyDictionary<int, Type> RegisterMap { get; } = new Dictionary<int, Type>
            (Bonsai.Harp.Device.RegisterMap.ToDictionary(entry => entry.Key, entry => entry.Value))
        {
<#
int registerIndex = 0;
foreach (var register in deviceRegisters)
{
#>
            { <#= register.Value.Address #>, typeof(<#= register.Key #>) }<#= ++registerIndex < deviceRegisters.Count ? "," : string.Empty #>
<#
}
#>
        };

        /// <summary>
        /// Gets the contents of the metadata file describing the <see cref="<#= deviceName #>"/>
        /// device registers.
        /// </summary>
        public static readonly string Metadata = GetDeviceMetadata();

        static string GetDeviceMetadata()
        {
            var deviceType = typeof(Device);
            using var metadataStream = deviceType.Assembly.GetManifestResourceStream($"{deviceType.Namespace}.device.yml");
            using var streamReader = new System.IO.StreamReader(metadataStream);
            return streamReader.ReadToEnd();
        }
    }

    /// <summary>
    /// Represents an operator that returns the contents of the metadata file
    /// describing the <see cref="<#= deviceName #>"/> device registers.
    /// </summary>
    [Description("Returns the contents of the metadata file describing the <#= deviceName #> device registers.")]
    public partial class GetDeviceMetadata : Source<string>
    {
        /// <summary>
        /// Returns an observable sequence with the contents of the metadata file
        /// describing the <see cref="<#= deviceName #>"/> device registers.
        /// </summary>
        /// <returns>
        /// A sequence with a single <see cref="string"/> object representing the
        /// contents of the metadata file.
        /// </returns>
        public override IObservable<string> Generate()
        {
            return Observable.Return(Device.Metadata);
        }
    }

    /// <summary>
    /// Represents an operator that groups the sequence of <see cref="<#= deviceName #>"/>" messages by register type.
    /// </summary>
    [Description("Groups the sequence of <#= deviceName #> messages by register type.")]
    public partial class GroupByRegister : Combinator<HarpMessage, IGroupedObservable<Type, HarpMessage>>
    {
        /// <summary>
        /// Groups an observable sequence of <see cref="<#= deviceName #>"/> messages
        /// by register type.
        /// </summary>
        /// <param name="source">The sequence of Harp device messages.</param>
        /// <returns>
        /// A sequence of observable groups, each of which corresponds to a unique
        /// <see cref="<#= deviceName #>"/> register.
        /// </returns>
        public override IObservable<IGroupedObservable<Type, HarpMessage>> Process(IObservable<HarpMessage> source)
        {
            return source.GroupBy(message => Device.RegisterMap[message.Address]);
        }
    }

    /// <summary>
    /// Represents an operator that writes the sequence of <see cref="<#= deviceName #>"/>" messages
    /// to the standard Harp storage format.
    /// </summary>
    [DefaultProperty(nameof(Path))]
    [Description("Writes the sequence of <#= deviceName #> messages to the standard Harp storage format.")]
    public partial class DeviceDataWriter : Sink<HarpMessage>, INamedElement
    {
        const string BinaryExtension = ".bin";
        const string MetadataFileName = "device.yml";
        readonly Bonsai.Harp.MessageWriter writer = new();

        string INamedElement.Name => nameof(<#= deviceName #>) + "DataWriter";

        /// <summary>
        /// Gets or sets the relative or absolute path on which to save the message data.
        /// </summary>
        [Description("The relative or absolute path of the directory on which to save the message data.")]
        [Editor("Bonsai.Design.FolderNameEditor, Bonsai.Design", DesignTypes.UITypeEditor)]
        public string Path { get; set; } = ".";

        /// <summary>
        /// Gets or sets a value indicating whether element writing should be buffered. If <see langword="true"/>,
        /// the write commands will be queued in memory as fast as possible and will be processed
        /// by the writer in a different thread. Otherwise, writing will be done in the same
        /// thread in which notifications arrive.
        /// </summary>
        [Description("Indicates whether writing should be buffered.")]
        public bool Buffered
        {
            get => writer.Buffered;
            set => writer.Buffered = value;
        }

        /// <summary>
        /// Gets or sets a value indicating whether to overwrite the output file if it already exists.
        /// </summary>
        [Description("Indicates whether to overwrite the output file if it already exists.")]
        public bool Overwrite
        {
            get => writer.Overwrite;
            set => writer.Overwrite = value;
        }

        /// <summary>
        /// Gets or sets a value specifying how the message filter will use the matching criteria.
        /// </summary>
        [Description("Specifies how the message filter will use the matching criteria.")]
        public FilterType FilterType
        {
            get => writer.FilterType;
            set => writer.FilterType = value;
        }

        /// <summary>
        /// Gets or sets a value specifying the expected message type. If no value is
        /// specified, all messages will be accepted.
        /// </summary>
        [Description("Specifies the expected message type. If no value is specified, all messages will be accepted.")]
        public MessageType? MessageType
        {
            get => writer.MessageType;
            set => writer.MessageType = value;
        }

        private IObservable<TSource> WriteDeviceMetadata<TSource>(IObservable<TSource> source)
        {
            var basePath = Path;
            if (string.IsNullOrEmpty(basePath))
                return source;

            var metadataPath = System.IO.Path.Combine(basePath, MetadataFileName);
            return Observable.Create<TSource>(observer =>
            {
                Bonsai.IO.PathHelper.EnsureDirectory(metadataPath);
                if (System.IO.File.Exists(metadataPath) && !Overwrite)
                {
                    throw new System.IO.IOException(string.Format("The file '{0}' already exists.", metadataPath));
                }

                System.IO.File.WriteAllText(metadataPath, Device.Metadata);
                return source.SubscribeSafe(observer);
            });
        }

        /// <summary>
        /// Writes each Harp message in the sequence to the specified binary file, and the
        /// contents of the device metadata file to a separate text file.
        /// </summary>
        /// <param name="source">The sequence of messages to write to the file.</param>
        /// <returns>
        /// An observable sequence that is identical to the <paramref name="source"/>
        /// sequence but where there is an additional side effect of writing the
        /// messages to a raw binary file, and the contents of the device metadata file
        /// to a separate text file.
        /// </returns>
        public override IObservable<HarpMessage> Process(IObservable<HarpMessage> source)
        {
            return source.Publish(ps => ps.Merge(
                WriteDeviceMetadata(writer.Process(ps.GroupBy(message => message.Address)))
                .IgnoreElements()
                .Cast<HarpMessage>()));
        }

        /// <summary>
        /// Writes each Harp message in the sequence of observable groups to the
        /// corresponding binary file, where the name of each file is generated from
        /// the common group register address. The contents of the device metadata file are
        /// written to a separate text file.
        /// </summary>
        /// <param name="source">
        /// A sequence of observable groups, each of which corresponds to a unique register
        /// address.
        /// </param>
        /// <returns>
        /// An observable sequence that is identical to the <paramref name="source"/>
        /// sequence but where there is an additional side effect of writing the Harp
        /// messages in each group to the corresponding file, and the contents of the device
        /// metadata file to a separate text file.
        /// </returns>
        public IObservable<IGroupedObservable<int, HarpMessage>> Process(IObservable<IGroupedObservable<int, HarpMessage>> source)
        {
            return WriteDeviceMetadata(writer.Process(source));
        }

        /// <summary>
        /// Writes each Harp message in the sequence of observable groups to the
        /// corresponding binary file, where the name of each file is generated from
        /// the common group register name. The contents of the device metadata file are
        /// written to a separate text file.
        /// </summary>
        /// <param name="source">
        /// A sequence of observable groups, each of which corresponds to a unique register
        /// type.
        /// </param>
        /// <returns>
        /// An observable sequence that is identical to the <paramref name="source"/>
        /// sequence but where there is an additional side effect of writing the Harp
        /// messages in each group to the corresponding file, and the contents of the device
        /// metadata file to a separate text file.
        /// </returns>
        public IObservable<IGroupedObservable<Type, HarpMessage>> Process(IObservable<IGroupedObservable<Type, HarpMessage>> source)
        {
            return WriteDeviceMetadata(writer.Process(source));
        }
    }
<#
if (deviceRegisters.Count > 0)
{
#>

    /// <summary>
    /// Represents an operator that filters register-specific messages
    /// reported by the <see cref="<#= deviceName #>"/> device.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
    [Description("Filters register-specific messages reported by the <#= deviceName #> device.")]
    public class FilterRegister : FilterRegisterBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterRegister"/> class.
        /// </summary>
        public FilterRegister()
        {
            Register = new <#= publicRegisters.First().Key #>();
        }

        string INamedElement.Name
        {
            get => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Register)}";
        }
    }

    /// <summary>
    /// Represents an operator which filters and selects specific messages
    /// reported by the <#= deviceName #> device.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(Timestamped<#= register.Key #>))]
<#
}
#>
    [Description("Filters and selects specific messages reported by the <#= deviceName #> device.")]
    public partial class Parse : ParseBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Parse"/> class.
        /// </summary>
        public Parse()
        {
            Register = new <#= publicRegisters.First().Key #>();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Register)}";
    }

    /// <summary>
    /// Represents an operator which formats a sequence of values as specific
    /// <#= deviceName #> register messages.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
    [Description("Formats a sequence of values as specific <#= deviceName #> register messages.")]
    public partial class Format : FormatBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Format"/> class.
        /// </summary>
        public Format()
        {
            Register = new <#= publicRegisters.First().Key #>();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Register)}";
    }
<#
foreach (var registerMetadata in deviceRegisters)
{
    var register = registerMetadata.Value;
    var hasConverter = register.HasConverter;
    var isPrivate = register.Visibility == RegisterVisibility.Private;
    var rawPayload = register.Converter == MemberConverter.RawPayload;
    var hasEvent = (register.Access & RegisterAccess.Event) != 0;
    var allowWrite = (register.Access & RegisterAccess.Write) != 0;
    var defaultMessageType = hasEvent ? "Event" : (allowWrite ? "Write" : "Read");
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
    var parsePayloadSuffix = rawPayload
        ? string.Empty
        : TemplateHelper.GetPayloadTypeSuffix(register.Type, register.Length);
    var parsePayloadSelector = $"message.GetPayload{parsePayloadSuffix}()";
    var parseConversion = TemplateHelper.GetParseConversion(register, parsePayloadSelector);

    var payloadValueSelector = "payload.Value";
    var timestampedPayloadSelector = $"message.GetTimestampedPayload{parsePayloadSuffix}()";
    var timestampedParseConversion = TemplateHelper.GetParseConversion(register, payloadValueSelector);

    var formatPayloadSuffix = rawPayload ? "Payload" : TemplateHelper.GetPayloadTypeSuffix(register.Type);
    var formatConversion = TemplateHelper.GetFormatConversion(register, "value");
    if (rawPayload) formatConversion = $"PayloadType.{register.Type}, {formatConversion}";
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"manipulates messages from register {registerMetadata.Key}"
        : $"{char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents a register that <#= summaryDescription #>.
    /// </summary>
    [Description("<#= register.Description #>")]
    <#= isPrivate ? "internal" : "public" #> partial class <#= registerMetadata.Key #>
    {
        /// <summary>
        /// Represents the address of the <see cref="<#= registerMetadata.Key #>"/> register. This field is constant.
        /// </summary>
        public const int Address = <#= register.Address #>;

        /// <summary>
        /// Represents the payload type of the <see cref="<#= registerMetadata.Key #>"/> register. This field is constant.
        /// </summary>
        public const PayloadType RegisterType = PayloadType.<#= register.Type #>;

        /// <summary>
        /// Represents the length of the <see cref="<#= registerMetadata.Key #>"/> register. This field is constant.
        /// </summary>
        public const int RegisterLength = <#= Math.Max(1, register.Length) #>;
<#
if (isPrivate)
{
#>
    }
<#
    continue;
}
    if (hasConverter)
    {
#>

        private static partial <#= interfaceType #> ParsePayload(<#= register.PayloadInterfaceType #> payload);
<#
    }
    else if (register.PayloadSpec != null)
    {
        foreach (var member in register.PayloadSpec)
        {
            if (member.Value.HasConverter)
            {
                var memberType = TemplateHelper.GetInterfaceType(member.Value, register.Type);
#>

        private static partial <#= memberType #> ParsePayload<#= member.Key #>(<#= register.PayloadInterfaceType #> payload<#= member.Key #>);
<#
            }
        }
#>

        static <#= interfaceType #> ParsePayload(<#= register.PayloadInterfaceType #> payload)
        {
            <#= interfaceType #> result;
<#
        foreach (var member in register.PayloadSpec)
        {
            var memberConversion = TemplateHelper.GetPayloadMemberParser(
                member.Key,
                member.Value,
                "payload",
                register.Type);
#>
            result.<#= member.Key #> = <#= memberConversion #>;
<#
        }
#>
            return result;
        }
<#
    }

    if (hasConverter)
    {
#>

        private static partial <#= register.PayloadInterfaceType #> FormatPayload(<#= interfaceType #> value);
<#
    }
    else if (register.PayloadSpec != null)
    {
        foreach (var member in register.PayloadSpec)
        {
            if (member.Value.HasConverter)
            {
                var paramName = CamelCaseNamingConvention.Instance.Apply(member.Key);
                var memberType = TemplateHelper.GetInterfaceType(member.Value, register.Type);
#>

        private static partial <#= register.PayloadInterfaceType #> FormatPayload<#= member.Key #>(<#= memberType #> <#= paramName #>);
<#
            }
        }
#>

        static <#= register.PayloadInterfaceType #> FormatPayload(<#= interfaceType #> value)
        {
            <#= register.PayloadInterfaceType #> result;
<#
        if (register.Length > 0)
        {
#>
            result = new <#= TemplateHelper.GetInterfaceType(register.Type) #>[<#= register.Length #>];
<#
        }
#>
<#
        var assigned = new bool[Math.Max(1, register.Length)];
        foreach (var member in register.PayloadSpec)
        {
            var payloadIndex = member.Value.Offset.GetValueOrDefault(0);
            var memberIndexer = member.Value.Offset.HasValue ? $"[{member.Value.Offset}]" : string.Empty;
            var memberConversion = TemplateHelper.GetPayloadMemberFormatter(
                member.Key,
                member.Value,
                $"value.{member.Key}",
                register.Type,
                assigned[payloadIndex]);
            assigned[payloadIndex] = true;
#>
            result<#= memberIndexer #><#= memberConversion #>;
<#
        }
#>
            return result;
        }
<#
    }#>

        /// <summary>
        /// Returns the payload data for <see cref="<#= registerMetadata.Key #>"/> register messages.
        /// </summary>
        /// <param name="message">A <see cref="HarpMessage"/> object representing the register message.</param>
        /// <returns>A value representing the message payload.</returns>
        public static <#= interfaceType #> GetPayload(HarpMessage message)
        {
            return <#= parseConversion #>;
        }

        /// <summary>
        /// Returns the timestamped payload data for <see cref="<#= registerMetadata.Key #>"/> register messages.
        /// </summary>
        /// <param name="message">A <see cref="HarpMessage"/> object representing the register message.</param>
        /// <returns>A value representing the timestamped message payload.</returns>
        public static Timestamped<<#= interfaceType #>> GetTimestampedPayload(HarpMessage message)
        {
<#
    if (timestampedParseConversion != payloadValueSelector)
    {
#>
            var payload = <#= timestampedPayloadSelector #>;
            return Timestamped.Create(<#= timestampedParseConversion #>, payload.Seconds);
<#
    }
    else
    {
#>
            return <#= timestampedPayloadSelector #>;
<#
    }
#>
        }

        /// <summary>
        /// Returns a Harp message for the <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="messageType">The type of the Harp message.</param>
        /// <param name="value">The value to be stored in the message payload.</param>
        /// <returns>
        /// A <see cref="HarpMessage"/> object for the <see cref="<#= registerMetadata.Key #>"/> register
        /// with the specified message type and payload.
        /// </returns>
        public static HarpMessage FromPayload(MessageType messageType, <#= interfaceType #> value)
        {
            return HarpMessage.From<#= formatPayloadSuffix #>(Address, messageType, <#= formatConversion #>);
        }

        /// <summary>
        /// Returns a timestamped Harp message for the <see cref="<#= registerMetadata.Key #>"/>
        /// register.
        /// </summary>
        /// <param name="timestamp">The timestamp of the message payload, in seconds.</param>
        /// <param name="messageType">The type of the Harp message.</param>
        /// <param name="value">The value to be stored in the message payload.</param>
        /// <returns>
        /// A <see cref="HarpMessage"/> object for the <see cref="<#= registerMetadata.Key #>"/> register
        /// with the specified message type, timestamp, and payload.
        /// </returns>
        public static HarpMessage FromPayload(double timestamp, MessageType messageType, <#= interfaceType #> value)
        {
            return HarpMessage.From<#= formatPayloadSuffix #>(Address, timestamp, messageType, <#= formatConversion #>);
        }
    }

    /// <summary>
    /// Provides methods for manipulating timestamped messages from the
    /// <#= registerMetadata.Key #> register.
    /// </summary>
    /// <seealso cref="<#= registerMetadata.Key #>"/>
    [Description("Filters and selects timestamped messages from the <#= registerMetadata.Key #> register.")]
    public partial class Timestamped<#= registerMetadata.Key #>
    {
        /// <summary>
        /// Represents the address of the <see cref="<#= registerMetadata.Key #>"/> register. This field is constant.
        /// </summary>
        public const int Address = <#= registerMetadata.Key #>.Address;

        /// <summary>
        /// Returns timestamped payload data for <see cref="<#= registerMetadata.Key #>"/> register messages.
        /// </summary>
        /// <param name="message">A <see cref="HarpMessage"/> object representing the register message.</param>
        /// <returns>A value representing the timestamped message payload.</returns>
        public static Timestamped<<#= interfaceType #>> GetPayload(HarpMessage message)
        {
            return <#= registerMetadata.Key #>.GetTimestampedPayload(message);
        }
    }
<#
}
#>

    /// <summary>
    /// Represents an operator which creates standard message payloads for the
    /// <#= deviceName #> device.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="Create<#= register.Key #>Payload"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(Create<#= register.Key #>Payload))]
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(CreateTimestamped<#= register.Key #>Payload))]
<#
}
#>
    [Description("Creates standard message payloads for the <#= deviceName #> device.")]
    public partial class CreateMessage : CreateMessageBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMessage"/> class.
        /// </summary>
        public CreateMessage()
        {
            Payload = new Create<#= publicRegisters.First().Key #>Payload();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Payload)}";
    }
<#
foreach (var registerMetadata in publicRegisters)
{
    var register = registerMetadata.Value;
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
    var defaultValue = TemplateHelper.GetDefaultValueAssignment(register.DefaultValue, register.MinValue, register.Type);
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"for register {registerMetadata.Key}"
        : $"that {char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents an operator that creates a message payload
    /// <#= summaryDescription #>.
    /// </summary>
    [DisplayName("<#= registerMetadata.Key #>Payload")]
    [Description("Creates a message payload <#= summaryDescription #>.")]
    public partial class Create<#= registerMetadata.Key #>Payload
    {<#
    if (register.PayloadSpec != null)
    {
        foreach (var member in register.PayloadSpec)
        {
            var memberType = TemplateHelper.GetInterfaceType(member.Value, register.Type);
            defaultValue = TemplateHelper.GetDefaultValueAssignment(member.Value.DefaultValue, member.Value.MinValue, register.Type);
            var memberDescription = string.IsNullOrEmpty(member.Value.Description)
                ? $"to write on payload member {member.Key}"
                : $"that {char.ToLower(member.Value.Description[0])}{member.Value.Description.Substring(1).TrimEnd('.')}";
#>

        /// <summary>
        /// Gets or sets a value <#= memberDescription #>.
        /// </summary>
<#
            if (member.Value.MinValue.HasValue || member.Value.MaxValue.HasValue)
            {
#>
        <#= TemplateHelper.GetRangeAttributeDeclaration(member.Value.MinValue, member.Value.MaxValue) #>
        [Editor(DesignTypes.NumericUpDownEditor, DesignTypes.UITypeEditor)]
<#
            }
#>
        [Description("<#= member.Value.Description #>")]
        public <#= memberType #> <#= member.Key #> { get; set; }<#= defaultValue #>
<#
        }
    }
    else
    {
#>

        /// <summary>
        /// Gets or sets the value <#= summaryDescription #>.
        /// </summary>
<#
        if (register.MinValue.HasValue || register.MaxValue.HasValue)
        {
#>
        <#= TemplateHelper.GetRangeAttributeDeclaration(register.MinValue, register.MaxValue) #>
        [Editor(DesignTypes.NumericUpDownEditor, DesignTypes.UITypeEditor)]
<#
        }
#>
        [Description("The value <#= summaryDescription #>.")]
        public <#= interfaceType #> <#= registerMetadata.Key #> { get; set; }<#= defaultValue #>
<#
    }
#>

        /// <summary>
        /// Creates a message payload for the <#= registerMetadata.Key #> register.
        /// </summary>
        /// <returns>The created message payload value.</returns>
        public <#= interfaceType #> GetPayload()
        {
<#
    if (register.PayloadSpec != null)
    {
#>
            <#= interfaceType #> value;
<#
        foreach (var member in register.PayloadSpec)
        {
#>
            value.<#= member.Key #> = <#= member.Key #>;
<#
        }
#>
            return value;
<#
    }
    else
    {
#>
            return <#= registerMetadata.Key #>;
<#
    }
#>
        }

        /// <summary>
        /// Creates a message <#= summaryDescription #>.
        /// </summary>
        /// <param name="messageType">Specifies the type of the created message.</param>
        /// <returns>A new message for the <#= registerMetadata.Key #> register.</returns>
        public HarpMessage GetMessage(MessageType messageType)
        {
            return <#= Namespace #>.<#= registerMetadata.Key #>.FromPayload(messageType, GetPayload());
        }
    }

    /// <summary>
    /// Represents an operator that creates a timestamped message payload
    /// <#= summaryDescription #>.
    /// </summary>
    [DisplayName("Timestamped<#= registerMetadata.Key #>Payload")]
    [Description("Creates a timestamped message payload <#= summaryDescription #>.")]
    public partial class CreateTimestamped<#= registerMetadata.Key #>Payload : Create<#= registerMetadata.Key #>Payload
    {
        /// <summary>
        /// Creates a timestamped message <#= summaryDescription #>.
        /// </summary>
        /// <param name="timestamp">The timestamp of the message payload, in seconds.</param>
        /// <param name="messageType">Specifies the type of the created message.</param>
        /// <returns>A new timestamped message for the <#= registerMetadata.Key #> register.</returns>
        public HarpMessage GetMessage(double timestamp, MessageType messageType)
        {
            return <#= Namespace #>.<#= registerMetadata.Key #>.FromPayload(timestamp, messageType, GetPayload());
        }
    }
<#
}
#>
<#
} // deviceRegisters.Count > 0
#>
<#
var payloadTypes = new HashSet<string>();
foreach (var registerMetadata in deviceRegisters)
{
    var register = registerMetadata.Value;
    if (register.PayloadSpec == null) continue;
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
    if (!payloadTypes.Add(interfaceType)) continue;
    var registerName = TemplateHelper.RemoveSuffix(interfaceType, "Payload");
#>

    /// <summary>
    /// Represents the payload of the <#= registerName #> register.
    /// </summary>
    public struct <#= interfaceType #>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= interfaceType #>"/> structure.
        /// </summary>
<#
    foreach (var member in register.PayloadSpec)
    {
        var paramName = CamelCaseNamingConvention.Instance.Apply(member.Key);
#>
        /// <param name="<#= paramName #>"><#= member.Value.Description #></param>
<#
    }
#>
        public <#= interfaceType #>(
<#
    var paramIndex = 0;
    foreach (var member in register.PayloadSpec)
    {
        var paramName = CamelCaseNamingConvention.Instance.Apply(member.Key);
        var paramType = TemplateHelper.GetInterfaceType(member.Value, register.Type);
#>
            <#= paramType #> <#= paramName #><#= ++paramIndex < register.PayloadSpec.Count ? "," : ")" #>
<#
    }
#>
        {
<#
    foreach (var member in register.PayloadSpec)
    {
        var paramName = CamelCaseNamingConvention.Instance.Apply(member.Key);
#>
            <#= member.Key #> = <#= paramName #>;
<#
    }
#>
        }
<#
    foreach (var member in register.PayloadSpec)
    {
        var memberType = TemplateHelper.GetInterfaceType(member.Value, register.Type);
#>

        /// <summary>
        /// <#= member.Value.Description #>
        /// </summary>
        public <#= memberType #> <#= member.Key #>;
<#
    }
#>

        /// <summary>
        /// Returns a <see cref="string"/> that represents the payload of
        /// the <#= registerName #> register.
        /// </summary>
        /// <returns>
        /// A <see cref="string"/> that represents the payload of the
        /// <#= registerName #> register.
        /// </returns>
        public override string ToString()
        {
            return "<#= interfaceType #> { " +
<#
    var memberIndex = 0;
    foreach (var member in register.PayloadSpec)
    {
#>
                "<#= member.Key #> = " + <#= member.Key #> + "<#= ++memberIndex < register.PayloadSpec.Count ? ", " : " " #>" +
<#
    }
#>
            "}";
        }
    }
<#
}
#>
<#
foreach (var bitMask in deviceMetadata.BitMasks)
{
    var mask = bitMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    [Flags]
    public enum <#= bitMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var bitIndex = 0;
    var bitCount = mask.Bits.Count;
    if (!mask.Bits.Values.Any(fieldInfo => fieldInfo.Value == 0))
    {
        bitCount++;
        if (mask.Bits.Values.Any(fieldInfo => !string.IsNullOrEmpty(fieldInfo.Description)))
        {
#>
        /// <summary>
        /// Specifies that no flags are defined.
        /// </summary>
<#
        }
#>
        None = 0x0<#= ++bitIndex < bitCount ? "," : string.Empty #>
<#
    }

    foreach (var bitField in mask.Bits)
    {
        var fieldInfo = bitField.Value;
#>
<#
        if (!string.IsNullOrEmpty(fieldInfo.Description))
        {
            if (bitIndex > 0) WriteLine("");
#>
        /// <summary>
        /// <#= fieldInfo.Description #>
        /// </summary>
        [Description("<#= fieldInfo.Description #>")]
<#
        }
#>
        <#= bitField.Key #> = 0x<#= fieldInfo.Value.ToString("X") #><#= ++bitIndex < bitCount ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
<#
foreach (var groupMask in deviceMetadata.GroupMasks)
{
    var mask = groupMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    public enum <#= groupMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var memberIndex = 0;
    foreach (var member in mask.Values)
    {
        var memberInfo = member.Value;
#>
<#
        if (!string.IsNullOrEmpty(memberInfo.Description))
        {
            if (memberIndex > 0) WriteLine("");
#>
        /// <summary>
        /// <#= memberInfo.Description #>
        /// </summary>
        [Description("<#= memberInfo.Description #>")]
<#
        }
#>
        <#= member.Key #> = <#= memberInfo.Value #><#= ++memberIndex < mask.Values.Count ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
}
